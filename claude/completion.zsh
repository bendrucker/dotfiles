#!/usr/bin/env zsh

# Claude CLI completion for Zsh
# Generated by Claude
#
# To regenerate this file:
# Prompt: "Re-generate the zsh completions for claude CLI by running 'claude --help'
# and exploring all subcommands with their --help flags. Create a comprehensive
# completions file that includes all options, subcommands, and their respective arguments."

_claude() {
  local line state

  # Define main options
  local -a main_options=(
    '-d[Enable debug mode with optional category filtering]'
    '--debug[Enable debug mode with optional category filtering]:filter:'
    '--verbose[Override verbose mode setting from config]'
    '-p[Print response and exit (useful for pipes)]'
    '--print[Print response and exit (useful for pipes)]'
    '--output-format[Output format (only works with --print)]:format:(text json stream-json)'
    '--include-partial-messages[Include partial message chunks as they arrive]'
    '--input-format[Input format (only works with --print)]:format:(text stream-json)'
    '--mcp-debug[DEPRECATED. Use --debug instead]'
    '--dangerously-skip-permissions[Bypass all permission checks]'
    '--replay-user-messages[Re-emit user messages from stdin back on stdout]'
    '--allowedTools[Comma or space-separated list of tool names to allow]:tools:'
    '--allowed-tools[Comma or space-separated list of tool names to allow]:tools:'
    '--disallowedTools[Comma or space-separated list of tool names to deny]:tools:'
    '--disallowed-tools[Comma or space-separated list of tool names to deny]:tools:'
    '--mcp-config[Load MCP servers from JSON files or strings]:file or string:_files'
    '--system-prompt[System prompt to use for the session]:prompt:'
    '--append-system-prompt[Append a system prompt to the default system prompt]:prompt:'
    '--permission-mode[Permission mode to use for the session]:mode:(acceptEdits bypassPermissions default plan)'
    '-c[Continue the most recent conversation]'
    '--continue[Continue the most recent conversation]'
    '-r[Resume a conversation]:session ID:'
    '--resume[Resume a conversation]:session ID:'
    '--fork-session[When resuming, create a new session ID instead of reusing the original]'
    '--model[Model for the current session]:model:(sonnet opus haiku)'
    '--fallback-model[Enable automatic fallback to specified model]:model:(sonnet opus haiku)'
    '--settings[Path to a settings JSON file or a JSON string]:file or json:_files'
    '--add-dir[Additional directories to allow tool access to]:directories:_directories'
    '--ide[Automatically connect to IDE on startup]'
    '--strict-mcp-config[Only use MCP servers from --mcp-config]'
    '--session-id[Use a specific session ID for the conversation]:uuid:'
    '--agents[JSON object defining custom agents]:json:'
    '--setting-sources[Comma-separated list of setting sources to load]:sources:'
    '--plugin-dir[Load plugins from directories for this session only]:paths:_directories'
    '-v[Output the version number]'
    '--version[Output the version number]'
    '-h[Display help for command]'
    '--help[Display help for command]'
  )

  # Define subcommands
  # shellcheck disable=SC2034
  local -a subcommands=(
    'mcp:Configure and manage MCP servers'
    'plugin:Manage Claude Code plugins'
    'migrate-installer:Migrate from global npm installation to local installation'
    'setup-token:Set up a long-lived authentication token'
    'doctor:Check the health of your Claude Code auto-updater'
    'update:Check for updates and install if available'
    'install:Install Claude Code native build'
  )

  _arguments -C \
    "${main_options[@]}" \
    '1: :->command' \
    '*::arg:->args'

  case $state in
    command)
      _describe -t commands 'claude command' subcommands
      ;;
    args)
      case ${line[1]} in
        mcp)
          _claude_mcp
          ;;
        plugin)
          _claude_plugin
          ;;
        install)
          _claude_install
          ;;
        *)
          _message 'no more arguments'
          ;;
      esac
      ;;
  esac
}

_claude_mcp() {
  local line state

  local -a mcp_options=(
    '-h[Display help for command]'
    '--help[Display help for command]'
  )

  # shellcheck disable=SC2034
  local -a mcp_subcommands=(
    'serve:Start the Claude Code MCP server'
    'add:Add an MCP server'
    'remove:Remove an MCP server'
    'list:List configured MCP servers'
    'get:Get details about an MCP server'
    'add-json:Add an MCP server (stdio or SSE) with a JSON string'
    'add-from-claude-desktop:Import MCP servers from Claude Desktop'
    'reset-project-choices:Reset all approved and rejected project-scoped servers'
  )

  _arguments -C \
    "${mcp_options[@]}" \
    '1: :->command' \
    '*::arg:->args'

  case $state in
    command)
      _describe -t commands 'claude mcp command' mcp_subcommands
      ;;
    args)
      case ${line[1]} in
        serve)
          _arguments \
            '--port[Port to run the server on]:port:' \
            '--host[Host to bind the server to]:host:' \
            '-h[Display help]' \
            '--help[Display help]'
          ;;
        add)
          _arguments \
            '-s[Configuration scope]:scope:(local user project)' \
            '--scope[Configuration scope]:scope:(local user project)' \
            '-t[Transport type]:transport:(stdio sse http)' \
            '--transport[Transport type]:transport:(stdio sse http)' \
            '-e[Set environment variables]:env:' \
            '--env[Set environment variables]:env:' \
            '-H[Set WebSocket headers]:header:' \
            '--header[Set WebSocket headers]:header:' \
            '-h[Display help]' \
            '--help[Display help]' \
            '1:name:' \
            '2:command or URL:' \
            '*:args:'
          ;;
        remove)
          _arguments \
            '-s[Configuration scope]:scope:(local user project)' \
            '--scope[Configuration scope]:scope:(local user project)' \
            '-h[Display help]' \
            '--help[Display help]' \
            '1:name:'
          ;;
        get)
          _arguments \
            '-h[Display help]' \
            '--help[Display help]' \
            '1:name:'
          ;;
        add-json)
          _arguments \
            '-s[Configuration scope]:scope:(local user project)' \
            '--scope[Configuration scope]:scope:(local user project)' \
            '-h[Display help]' \
            '--help[Display help]' \
            '1:name:' \
            '2:json:'
          ;;
        add-from-claude-desktop)
          _arguments \
            '-s[Configuration scope]:scope:(local user project)' \
            '--scope[Configuration scope]:scope:(local user project)' \
            '-h[Display help]' \
            '--help[Display help]'
          ;;
      esac
      ;;
  esac
}

_claude_plugin() {
  local line state

  local -a plugin_options=(
    '-h[Display help for command]'
    '--help[Display help for command]'
  )

  # shellcheck disable=SC2034
  local -a plugin_subcommands=(
    'validate:Validate a plugin or marketplace manifest'
    'marketplace:Manage Claude Code marketplaces'
    'install:Install a plugin from available marketplaces'
    'i:Install a plugin from available marketplaces'
    'uninstall:Uninstall an installed plugin'
    'remove:Uninstall an installed plugin'
    'enable:Enable a disabled plugin'
    'disable:Disable an enabled plugin'
  )

  _arguments -C \
    "${plugin_options[@]}" \
    '1: :->command' \
    '*::arg:->args'

  case $state in
    command)
      _describe -t commands 'claude plugin command' plugin_subcommands
      ;;
    args)
      case ${line[1]} in
        validate)
          _arguments \
            '-h[Display help]' \
            '--help[Display help]' \
            '1:path:_files'
          ;;
        marketplace)
          _claude_plugin_marketplace
          ;;
        install|i)
          _arguments \
            '-h[Display help]' \
            '--help[Display help]' \
            '1:plugin:'
          ;;
        uninstall|remove)
          _arguments \
            '-h[Display help]' \
            '--help[Display help]' \
            '1:plugin:'
          ;;
        enable|disable)
          _arguments \
            '-h[Display help]' \
            '--help[Display help]' \
            '1:plugin:'
          ;;
      esac
      ;;
  esac
}

_claude_plugin_marketplace() {
  local line state

  local -a marketplace_options=(
    '-h[Display help for command]'
    '--help[Display help for command]'
  )

  # shellcheck disable=SC2034
  local -a marketplace_subcommands=(
    'add:Add a marketplace from a URL, path, or GitHub repo'
    'list:List all configured marketplaces'
    'remove:Remove a configured marketplace'
    'rm:Remove a configured marketplace'
    'update:Update marketplace(s) from their source'
  )

  _arguments -C \
    "${marketplace_options[@]}" \
    '1: :->command' \
    '*::arg:->args'

  case $state in
    command)
      _describe -t commands 'claude plugin marketplace command' marketplace_subcommands
      ;;
    args)
      case ${line[1]} in
        add)
          _arguments \
            '-h[Display help]' \
            '--help[Display help]' \
            '1:source:'
          ;;
        remove|rm)
          _arguments \
            '-h[Display help]' \
            '--help[Display help]' \
            '1:name:'
          ;;
        update)
          _arguments \
            '-h[Display help]' \
            '--help[Display help]' \
            '1:name:'
          ;;
      esac
      ;;
  esac
}

_claude_install() {
  _arguments \
    '--force[Force installation even if already installed]' \
    '-h[Display help]' \
    '--help[Display help]' \
    '1:target:(stable latest)'
}

compdef _claude claude
