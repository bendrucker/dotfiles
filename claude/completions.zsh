#compdef claude

# Claude CLI completion for Zsh
# Generated by Claude
#
# To regenerate this file:
# Prompt: "Write zsh completions for the claude CLI. Discover commands and options by running 
# 'claude --help' and explore subcommands with their --help flags. Create a comprehensive 
# completions file that includes all options, subcommands, and their respective arguments.
# Include this header comment in the generated file."

_claude() {
  local line state

  # Define main options
  local -a main_options=(
    '-d[Enable debug mode]'
    '--debug[Enable debug mode]'
    '--verbose[Override verbose mode setting from config]'
    '-p[Print response and exit (useful for pipes)]'
    '--print[Print response and exit (useful for pipes)]'
    '--output-format[Output format (only works with --print)]:format:(text json stream-json)'
    '--input-format[Input format (only works with --print)]:format:(text stream-json)'
    '--mcp-debug[DEPRECATED. Use --debug instead]'
    '--dangerously-skip-permissions[Bypass all permission checks]'
    '--allowedTools[Comma or space-separated list of tool names to allow]:tools:'
    '--disallowedTools[Comma or space-separated list of tool names to deny]:tools:'
    '--mcp-config[Load MCP servers from a JSON file or string]:file or string:_files'
    '-c[Continue the most recent conversation]'
    '--continue[Continue the most recent conversation]'
    '-r[Resume a conversation]:session ID:'
    '--resume[Resume a conversation]:session ID:'
    '--model[Model for the current session]:model:(sonnet opus haiku claude-sonnet-4-20250514 claude-opus-4-20250514)'
    '--fallback-model[Enable automatic fallback to specified model]:model:(sonnet opus haiku)'
    '--add-dir[Additional directories to allow tool access to]:directories:_directories'
    '--ide[Automatically connect to IDE on startup]'
    '-v[Output the version number]'
    '--version[Output the version number]'
    '-h[Display help for command]'
    '--help[Display help for command]'
  )

  # Define subcommands
  local -a subcommands=(
    'config:Manage configuration'
    'mcp:Configure and manage MCP servers'
    'migrate-installer:Migrate from global npm installation to local installation'
    'doctor:Check the health of your Claude Code auto-updater'
    'update:Check for updates and install if available'
    'install:Install Claude Code native build'
  )

  _arguments -C \
    $main_options \
    '1: :->command' \
    '*::arg:->args'

  case $state in
    command)
      _describe -t commands 'claude command' subcommands
      ;;
    args)
      case $line[1] in
        config)
          _claude_config
          ;;
        mcp)
          _claude_mcp
          ;;
        install)
          _claude_install
          ;;
        *)
          _message 'no more arguments'
          ;;
      esac
      ;;
  esac
}

_claude_config() {
  local line state

  local -a config_options=(
    '-h[Display help for command]'
    '--help[Display help for command]'
  )

  local -a config_subcommands=(
    'get:Get a config value'
    'set:Set a config value'
    'remove:Remove a config value or items from a config array'
    'rm:Remove a config value or items from a config array'
    'list:List all config values'
    'ls:List all config values'
    'add:Add items to a config array'
  )

  _arguments -C \
    $config_options \
    '1: :->command' \
    '*::arg:->args'

  case $state in
    command)
      _describe -t commands 'claude config command' config_subcommands
      ;;
    args)
      case $line[1] in
        get)
          _arguments \
            '-g[Global config]' \
            '--global[Global config]' \
            '1:key:' \
            '*::arg:'
          ;;
        set)
          _arguments \
            '-g[Global config]' \
            '--global[Global config]' \
            '1:key:' \
            '2:value:' \
            '*::arg:'
          ;;
        remove|rm)
          _arguments \
            '-g[Global config]' \
            '--global[Global config]' \
            '1:key:' \
            '*:values:'
          ;;
        list|ls)
          _arguments \
            '-g[Global config]' \
            '--global[Global config]'
          ;;
        add)
          _arguments \
            '-g[Global config]' \
            '--global[Global config]' \
            '1:key:' \
            '*:values:'
          ;;
      esac
      ;;
  esac
}

_claude_mcp() {
  local line state

  local -a mcp_options=(
    '-h[Display help for command]'
    '--help[Display help for command]'
  )

  local -a mcp_subcommands=(
    'serve:Start the Claude Code MCP server'
    'add:Add a server'
    'remove:Remove an MCP server'
    'list:List configured MCP servers'
    'get:Get details about an MCP server'
    'add-json:Add an MCP server (stdio or SSE) with a JSON string'
    'add-from-claude-desktop:Import MCP servers from Claude Desktop'
    'reset-project-choices:Reset all approved and rejected project-scoped servers'
  )

  _arguments -C \
    $mcp_options \
    '1: :->command' \
    '*::arg:->args'

  case $state in
    command)
      _describe -t commands 'claude mcp command' mcp_subcommands
      ;;
    args)
      case $line[1] in
        serve)
          _arguments \
            '--port[Port to run the server on]:port:' \
            '--host[Host to bind the server to]:host:'
          ;;
        add)
          _arguments \
            '-g[Global config]' \
            '--global[Global config]' \
            '1:name:' \
            '2:command or URL:' \
            '*:args:'
          ;;
        remove)
          _arguments \
            '-g[Global config]' \
            '--global[Global config]' \
            '1:name:'
          ;;
        get)
          _arguments '1:name:'
          ;;
        add-json)
          _arguments \
            '-g[Global config]' \
            '--global[Global config]' \
            '1:name:' \
            '2:json:'
          ;;
        add-from-claude-desktop)
          _arguments \
            '-g[Global config]' \
            '--global[Global config]'
          ;;
      esac
      ;;
  esac
}

_claude_install() {
  _arguments \
    '--reinstall[Force reinstall even if already installed]' \
    '1:target:(stable latest)'
}

# Register the completion function
compdef _claude claude